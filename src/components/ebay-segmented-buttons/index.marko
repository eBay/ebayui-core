import { processHtmlAttributes } from "../../common/html-attributes";
import type { WithNormalizedProps } from "../../global";

static const validSizes = ["large"] as const;

export interface SegmentedButtonsEvent {
    originalEvent: PointerEvent;
    index: number;
    value?: string;
}

export interface SegmentedButton extends Omit<Marko.Input<"button">, `on${string}`> {
    selected?: boolean;
    icon?: Marko.Renderable;
}

static interface SegmentedButtonsInput extends Omit<Marko.Input<"div">, `on${string}`> {
    buttons?: Marko.RepeatableAttrTag<SegmentedButton>;
    size?: (typeof validSizes)[number];
    "on-change"?: (event: SegmentedButtonsEvent) => void;
}

export interface Input extends WithNormalizedProps<SegmentedButtonsInput> {}

$ let {
    size: inputSize,
    class: inputClass,
    buttons,
    ...htmlInput
} = input;

$ var size = inputSize && validSizes.includes(inputSize) ? inputSize : null;

<div
    class=[
        "segmented-buttons",
        size && `segmented-buttons--${size}`,
        input.class,
    ]
    ...processHtmlAttributes(htmlInput)
>
    <ul>
        <for|button, index| of=input.buttons || []>
            $ const {
                class: buttonClass,
                icon,
                renderBody,
                ...htmlButton
            } = button;
            <li>
                <button
                    class=["segmented-buttons__button", buttonClass]
                    aria-current=state.selectedIndex === index && "true"
                    on-click("onButtonClick", index)
                    ...processHtmlAttributes(htmlButton)
                >
                    <if(icon)>
                        <span class="segmented-buttons__button-cell">
                            <${icon}/>
                            <span>
                                <${button}/>
                            </span>
                        </span>
                    </if>
                    <else>
                        <${renderBody}/>
                    </else>
                </button>
            </li>
        </for>
    </ul>
</div>
