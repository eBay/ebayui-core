import { processHtmlAttributes } from "../../common/html-attributes";
static var validDensity = ["compact", "relaxed"];
static var validColumnTypeForClassname = ["numeric", "icon-action"];
$ const {
    class: divClass,
    density,
    header: headers,
    row: rows,
    allSelected,
    a11ySelectAllText,
    a11ySelectRowText,
    mode = "none",
    ...divInput
} = input;

<div
    ...processHtmlAttributes(divInput)
    class=[
        "table",
        mode === "selection" && "table--mode-selection",
        density &&
            validDensity.includes(density) &&
            `table--density-${density}`,
        divClass,
    ]
    role="group"
    tabindex="0"
>
    <table>
        <thead>
            <tr>
                <if(mode === "selection")>
                    <th class="table-cell">
                        <ebay-tri-state-checkbox
                            aria-label=(a11ySelectAllText ?? "Select all rows")
                            checked=state.allSelected
                            on-change("headerSelect")
                        />
                    </th>
                </if>
                <for|header, headerIndex| of=headers>
                    $ const {
                        columnType = "normal",
                        class: thClass,
                        name = `${headerIndex}`,
                        sort,
                        renderBody,
                        href,
                        ...thInput
                    } = header;
                    $ const sortOrder = state.sorted[name];
                    $ let ariaSort: Marko.AriaAttributes["aria-sort"];
                    $ if (sortOrder === "asc") {
                        ariaSort = "ascending";
                    } else if (sortOrder === "desc") {
                        ariaSort = "descending";
                    }
                    <th
                        ...processHtmlAttributes(thInput)
                        class=[
                            "table-cell",
                            header.columnType &&
                                validColumnTypeForClassname.includes(
                                    header.columnType,
                                ) &&
                                `table-cell--${header.columnType}`,
                            thClass,
                        ]
                        aria-sort=ariaSort
                    >
                        $ let sortEleAttr = {};
                        $ if (href) {
                            sortEleAttr = { href };
                        } else if (sortOrder) {
                            sortEleAttr = {
                                type: "button",
                                "aria-pressed":
                                    sortOrder !== "none" ? "true" : "false",
                            };
                        }
                        <${href ? "a" : sortOrder ? "button" : null}
                            ...sortEleAttr
                            on-click(href ? undefined : "sortColumn", name)
                        >
                            <${renderBody}/>
                            <if(sortOrder)>
                                ${" "}
                                <if(sortOrder === "asc")>
                                    <ebay-sort-down-12-icon/>
                                </if>
                                <else-if(sortOrder === "desc")>
                                    <ebay-sort-up-12-icon/>
                                </else-if>
                                <else>
                                    <ebay-sort-12-icon/>
                                </else>
                            </if>
                        </>
                    </th>
                </for>
            </tr>
        </thead>
        <tbody>
            <for|row, rowIndex| of=rows || []>
                $ const {
                    cell: cells,
                    name = `${rowIndex}`,
                    selected,
                    ...trInput
                } = row;
                <tr ...processHtmlAttributes(trInput)>
                    <if(mode === "selection")>
                        <th scope="row" class="table__cell">
                            <ebay-checkbox
                                aria-label=(a11ySelectRowText ?? "Select row")
                                checked=(state.selected[name])
                                on-change("rowSelect", name)
                            />
                        </th>
                    </if>
                    <for|header, index| of=headers>
                        $ const cell = (
                            Array.isArray(cells) ? cells[index] : cells
                        );
                        <if(cell)>
                            $ const {
                                class: tdClass,
                                renderBody,
                                ...tdInput
                            } = cell;
                            $ const cellBaseClass = [
                                "table-cell",
                                header.columnType &&
                                    validColumnTypeForClassname.includes(
                                        header.columnType,
                                    ) &&
                                    `table-cell--${header.columnType}`,
                            ];
                            <${header.columnType === "row-header" ? "th" : "td"}
                                ...processHtmlAttributes(tdInput)
                                class=[cellBaseClass, tdClass]
                            >
                                <${
                                    header.columnType === "layout" && "div"
                                } class="table-cell__layout">
                                    <${renderBody}/>
                                </>
                            </>
                        </if>
                    </for>
                </tr>
            </for>
        </tbody>
    </table>
</div>
