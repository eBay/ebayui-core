import { processHtmlAttributes } from "../../../common/html-attributes"

static const isBrowser = typeof window !== "undefined";

static var ignoredAttributes = [
    "open",
    "type",
    "classPrefix",
    "focus",
    "closeFocus",
    "a11yCloseText",
    "windowClass",
    "baseEl",
    "header",
    "footer",
    "transitionEl",
    "isModal",
    "closeButton",
    "closeButtonClass",
    "closeButtonText",
    "ignoreEscape",
    "slideFrom",
    "windowType",
    "mainId",
    "ariaLabelledby",
    "buttonPosition",
    "useHiddenProperty",
    "position",
    "variant",
    "confirmText",
    "rejectText",
    "noHandle",
    "top"
];

static var ignoredHeaderAttributes = ["id", "as", "class"];

$ var buttonPosition = input.buttonPosition || "right";
$ var baseEl = input.baseEl || "div";
$ var header = input.header;
<macro name="header-content">
    <${header.as || "h2"}
        class=[header.class, `${input.classPrefix}__title`]
        ...processHtmlAttributes(header, ignoredHeaderAttributes)
        id=(header.id || component.getElId("dialog-title"))>
        <${header.renderBody}/>
    </>
</macro>
<macro name="button-content">
    <if(buttonPosition !== "hidden")>
        <button
            key="close"
            class=[input.closeButtonText ? "fake-link" : "icon-btn", input.closeButtonClass, `${input.classPrefix}__close` ]
            type="button"
            aria-label=input.a11yCloseText
            onClick("handleCloseButtonClick")>
            <if (input.closeButtonText)>
                ${input.closeButtonText}
            </if>
            <else-if(input.closeButton)>
                <${input.closeButton}/>
            </else-if>
            <else>
                <ebay-close-small-icon/>
            </else>
        </button>
    </if>
</macro>
<${baseEl}
    ...processHtmlAttributes(input, ignoredAttributes)
    aria-labelledby=(
        input.ariaLabelledby ||
        (input.header && component.getElId("dialog-title"))
    )
    aria-modal="true"
    role=(input.role || "dialog")
    class=[input.classPrefix, input.class]
    hidden:no-update=!state.open
    aria-live=(!input.isModal && "polite")
    onClick("handleDialogClick")
    onMousedown("handleStartClick")>
    <if(state.open && isBrowser && !input.ignoreEscape)>
        <subscribe to=document on-keydown("handleKeydown")/>
    </if>
    <if(!state.open && isBrowser)>
        <subscribe to=window on-click("trackLastClick")/>
    </if>
    <div
        key="window"
        onMouseEnter("emit", "mouseEnter")
        onMouseLeave("emit", "mouseLeave")
        class=[
            input.windowType
                ? `${input.classPrefix}__${input.windowType}-window`
                : `${input.classPrefix}__window`,
            input.windowClass
        ]>
        <if(input.top)>
            <${input.top.renderBody}/>
        </if>
        <div class=`${input.classPrefix}__header`>
            <if(header && buttonPosition === "right")>
                <header-content/>
            </if>
            <if(buttonPosition !== "bottom")>
                <button-content/>
            </if>
            <if(
                header &&
                (buttonPosition === "left" || buttonPosition === "hidden")
            )>
                <header-content/>
            </if>
        </div>
        <div
            id=input.mainId
            class=`${input.classPrefix}__main`
            key="body"
            onScroll("handleScroll")>
            <${input.renderBody}/>
        </div>
        <if(input.action)>
            <span class=`${input.classPrefix}__actions`>
                <${input.action && input.action.renderBody}/>
            </span>
        </if>
        <if(input.footer || buttonPosition === "bottom")>
            <div class=`${input.classPrefix}__footer`>
                <${input.footer && input.footer.renderBody}/>
                <if(buttonPosition === "bottom")>
                    <button-content/>
                </if>
            </div>
        </if>
    </div>
</>
