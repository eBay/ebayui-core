import { processHtmlAttributes } from "../../common/html-attributes"

static function toJSON() {
    return {
        floatingLabel: this.floatingLabel
    };
}

static var ignoredAttributes = [
    "class",
    "style",
    "invalid",
    "fluid",
    "multiline",
    "floatingLabel",
    "prefixIcon",
    "postfixIcon",
    "inputSize",
    "opaqueLabel",
    "toJSON",
    "label",
    "charCount",
    "description"
];

$ input.toJSON = toJSON;
$ var isPostfix = !!input.postfixIcon;
$ var hasIcon = input.prefixIcon || isPostfix;
$ var isLarge = input.inputSize === "large";
$ var displayIcon = Boolean(!input.multiline && hasIcon);
$ var id = input.id || component.getElId("textbox");
$ var defaultTag = input.fluid ? "div" : "span";
$ const hasField = input.charCount || input.description || input.label;
$ const floatingLabelClasses = input.floatingLabel && ["floating-label", isLarge && "floating-label--large", input.opaqueLabel && "floating-label--opaque"];
$ const descriptionId = input.description && input.description.id || component.getElId("description")
$ const charCountId = input.charCount && input.charCount.id || component.getElId("char-count")
<${(hasField || floatingLabelClasses) && defaultTag} class=[floatingLabelClasses, hasField && "field"]>
    <if(input.floatingLabel)>
        <label
            for=id
            class=[
                "floating-label__label",
                input.disabled && "floating-label__label--disabled"
            ]>
            ${input.floatingLabel}
        </label>
    </if>
    <if(input.label)>
        <label
            for=id
            class=[
                "field__label",
                input.disabled && "field__label--disabled",
                input.label.stacked !== false && "field__label--stacked",
                input.label?.class
            ]>
            <${input.label}/>
        </label>
    </if>
    <${defaultTag}
        style=input.style
        class=[
            "textbox",
            hasField && "field__control",
            input.class,
            displayIcon && isPostfix && "textbox--icon-end"
        ]>
        <if(displayIcon && input.prefixIcon)>
            <${input.prefixIcon}/>
        </if>
        <${input.multiline ? "textarea" : "input"}
            ...processHtmlAttributes(input, ignoredAttributes)
            id=id
            key="input"
            class=[
                "textbox__control",
                input.fluid && "textbox__control--fluid",
                isLarge && "textbox__control--large"
            ]
            type=(!input.multiline && (input.type || "text"))
            value=(!input.multiline && state.value)
            aria-invalid=(input.invalid && "true")
            aria-live=(input.charCount?.max && input.charCount.max <= state.charCount ? "polite" : "off")
            aria-describedby=[descriptionId, charCountId].filter(Boolean).join(" ") || false
            onKeydown("forwardCharEvent", "keydown")
            onKeypress("forwardCharEvent", "keypress")
            onKeyup("forwardCharEvent", "keyup")
            onChange("forwardCharEvent", "change")
            onInput("forwardCharEvent", "input-change")
            onFocus("forwardEvent", "focus")
            onBlur("forwardEvent", "blur")
            onInvalid("forwardEvent", "invalid")>
            <if(input.multiline && state.value)>${state.value}</if>
        </>
        <if(displayIcon && input.postfixIcon)>
            <${input.buttonAriaLabel && "button"}
                class="icon-btn icon-btn--transparent"
                aria-label=input.buttonAriaLabel
                type=(input.buttonAriaLabel && "button")
                on-click("handleButtonClick")>
                <${input.postfixIcon}/>
            </>
        </if>
    </>
    <if(input.description || input.charCount)>
        <${input.description?.as || "div"} class=["field__description", input.charCount && "field__description--group", input.description?.class]>
            <if(input.description)>
                <span id=descriptionId>
                    <${input.description}/>
                </>
            </if>
            <if(input.charCount)>
                <span id=charCountId>
                    <if(input.charCount.renderBody)>
                        <${input.charCount}/>
                    </if>
                    <else>
                        ${state.charCount}/${input.charCount.max}
                        <if(input.charCount.clippedText)>
                            <span class="clipped"> ${input.charCount.clippedText}</span>
                        </if>
                    </else>
                </span>
            </if>
        </>
    </if>
</>
