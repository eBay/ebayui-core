import { processHtmlAttributes } from "../../common/html-attributes"

$ const {
    class: inputClass,
    style,
    classPrefix,
    type,
    reverse,
    fixWidth,
    items,
    ...htmlInput
} = input;

$ var isRadio = type === "radio";
$ var isCheckbox = type === "checkbox";
$ var isCheckable = type === "checkbox" || type === "radio";
$ var baseClass = classPrefix || "menu";
$ var separatorMap = component.getSeparatorMap(input);
<span
    ...processHtmlAttributes(htmlInput)
    class=[
        classPrefix
            ? `${baseClass}__menu`
            : "menu",
        reverse && `${baseClass}__menu--reverse`,
        fixWidth && `${baseClass}__menu--fix-width`,
        inputClass
    ]
    style=style>
    <div
        role="menu"
        class=`${baseClass}__items`
        key="menu"
        id:scoped="menu">
        <for|item, index| of=(component.items)>
            $ const {
                class: itemClass,
                style,
                value,
                checked: itemChecked,
                badgeNumber,
                disabled,
                renderBody,
                ...htmlItem
            } = item;
            $ {
                var itemRole: Marko.Input<"div">["role"] = isRadio
                                ? "menuitemradio"
                                : isCheckbox
                                ? "menuitemcheckbox"
                                : "menuitem";
                var checked = component.isChecked(index);
            }
            <if (separatorMap[index])>
                <hr class=`${baseClass}__separator` role="separator" />
            </if>
            <div
                ...processHtmlAttributes(htmlItem)
                class=[`${baseClass}__item`, itemClass, badgeNumber !== undefined &&  `${baseClass}__item--badged`]
                style=style
                aria-checked=isCheckable && (checked ? "true" : "false")
                aria-disabled=disabled && "true"
                role=itemRole
                onClick(!disabled && "handleItemClick", index)
                onKeydown(!disabled && "handleItemKeydown", index)
                onKeypress(!disabled && "handleItemKeypress")
                key="item[]">
                <span>
                    <${renderBody}/>
                    <if(badgeNumber)>
                        <ebay-badge type="menu" number=badgeNumber/>
                    </if>
                </span>
                <ebay-tick-16-icon />
            </div>
        </for>
    </div>
</span>
