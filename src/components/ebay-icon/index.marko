import { processHtmlAttributes } from "../../common/html-attributes"

static var isBrowser = typeof window !== "undefined";

static var browserLookup: Record<string, unknown> = {};

$ const {
    _name,
    _type,
    _themes,
    _def,
    a11yText,
    a11yVariant,
    class: inputClass,
    noSkinClasses,
    ...htmlInput
} = input;

static function getIconClass(type: string, name: string) {
    if (type === "icon") {
        return `icon icon--${name}`;
    } else {
        var dashedName = name.replace(type, `${type}-`);
        return `${type} ${dashedName}`
    }
}

$ var noTitle = a11yVariant === "label";
$ var lookup = isBrowser ? browserLookup : out.global;
$ {
    var a11yAttributes = a11yText
        ? { role: "img" }
        : { "aria-hidden": "true" };
    var prefixSvg = _type === "icon" ? "icon-" : "";
}
<svg
    ...a11yAttributes
    ...processHtmlAttributes(htmlInput)
    class=[inputClass, !noSkinClasses && getIconClass(_type, _name)]
    key="svg"
    focusable="false"
    aria-labelledby=(a11yText && !noTitle && component.elId("text"))
    aria-label=(noTitle && a11yText)>
    <!-- Here we check if we should render the inline svg symbol. -->
    <!-- Server side we store a flag in `out.global` to check if the symbol was rendered. -->
    <!-- Client side we check the `browserLookup` object to see if the symbol is already present in root svg. -->
    $ var themes = _themes;
    $ var lookupName = "rendered_ebay_icon_" + _name;
    $ var renderDefs = !lookup[lookupName];
    $ lookup[lookupName] = true;
    <if(renderDefs && themes)>
        <defs key="defs">
            <if(!isBrowser)>
                $!{themes()}
            </if>
        </defs>
    </if>
    <if(a11yText && !noTitle)>
        <title id:scoped="text">${a11yText}</title>
    </if>
    <use href=`#${prefixSvg}${_name}`/>
</svg>
