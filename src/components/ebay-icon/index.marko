import processHtmlAttributes from "../../common/html-attributes"
import dsUtil from '../../common/ds-util';

static function noop() {}
static var isBrowser = typeof window !== "undefined";
static var browserLookup = {};
static var ignoredAttributes = [
    "_name",
    "noSkinClasses",
    "_themes",
    "toJSON"
];

$ input.toJSON = noop;
$ var lookup = isBrowser ? browserLookup : out.global;
$ var a11yAttributes = input.a11yText ? { role: "img" } : { "aria-hidden": "true" }

<svg
    ...a11yAttributes
    ...processHtmlAttributes(input, ignoredAttributes)
    class=[input.class, !input.noSkinClasses && `icon icon--${input._name}`]
    focusable="false"
    aria-labelledby=(input.a11yText && component.elId("text"))>
    <!-- Here we check if we should render the inline svg symbol. -->
    <!-- Server side we store a flag in `out.global` to check if the symbol was rendered. -->
    <!-- Client side we check the `browserLookup` object to see if the symbol is already present in root svg. -->
    $ var themes = input._themes;
    $ var lookupName = "rendered_ebay_icon_" + input._name;
    $ var renderDefs = !lookup[lookupName];
    $ lookup[lookupName] = true;
    <if(renderDefs && themes)>
        <defs key="defs" id:scoped="defs">
            $ {
                var theme;

                if (isBrowser) {
                    // All icons should be remapped to the right one in the browser, just use the first.
                    theme = themes.filter(Boolean)[0];
                } else {
                    // Actual magic, please do not try to replicate.
                    var lassoContext = out.global["lasso/LassoRenderContext"];

                    var flags = lassoContext &&
                        lassoContext.data &&
                        lassoContext.data.config &&
                        lassoContext.data.config.flags;
                    theme = themes[dsUtil.getDSFromFlag(flags)];
                }
            }

            <${theme}/>
        </defs>
    </if>

    <if(input.a11yText)>
        <title id:scoped="text">${input.a11yText}</title>
    </if>

    <use xlink:href=`#icon-${input._name}`/>
</>
