import processHtmlAttributes from "../../common/html-attributes"

static var ignoredAttributes = [
    "class",
    "style",
    "borderless",
    "autocomplete",
    "options",
    "roledescription"
];

static var ignoredButtonAttributes = [
    "class"
];

static var itemIgnoredAttributes = ["text"];
$ {
    var roledescription = input.roledescription ||
        (`Use up and down arrow keys to navigate options.${
            input.autocomplete === 'none' ? '': ' Options change based on text input'
        }`);
}

$ var hasButton = !!input.button;
<span
    class:no-update=["combobox", input.class]
    style=input.style
    onExpander-expand("handleExpand")
    onExpander-collapse("handleCollapse")>
    <span class=[
        "combobox__control",
        hasButton && "combobox__control--actionable",
        input.borderless && "combobox__control--borderless"
    ]>
        <!--
        NOTE: Uses autocomplete="new-password" because of a problem with Chrome where the autfill does not
        respect the "off" key. Tested and works in all other browsers properly as well.
        -->
        <input
            ...processHtmlAttributes(
                Object.assign(input, {
                    id: input.id || component.getElId("input")
                }),
                ignoredAttributes
            )
            key="combobox"
            type="text"
            role="combobox"
            value=state.currentValue
            aria-autocomplete=input.autocomplete
            aria-roledescription=roledescription
            aria-haspopup="listbox"
            autocomplete="new-password"
            onBlur("handleComboboxBlur")
            onKeydown("handleComboboxKeyDown")
            onKeyup("handleComboboxKeyUp")/>
        <${hasButton ? "button" : null}
            ...processHtmlAttributes(input.button, ignoredButtonAttributes)
            onClick("handleButtonClick")
            key="actionable"
            class=["icon-btn", hasButton && input.button.class]>
            <if(hasButton && input.button.renderBody)>
                <${input.button.renderBody}/>
            </if>
            <else>
                <ebay-icon name="dropdown"/>
            </else>
        </>
    </span>
    <if(component._hasVisibleOptions())>
        <div key="listbox" role="listbox" class="combobox__listbox">
            <for|option| of=component._getVisibleOptions()>
                $ var isSelected = (option.value || option.text) === state.currentValue;
                <div
                    ...processHtmlAttributes(option, itemIgnoredAttributes)
                    key="options[]"
                    role="option"
                    class:no-update=["combobox__option", option.class]
                    tabindex:no-update="-1"
                    aria-selected=(isSelected && "true")
                    onClick("handleSelectOption", option.text)
                    onMousedown("handleSelectOption", option.text)>
                    <span>${option.text}</span>
                </div>
            </for>
        </div>
    </if>
</span>
