import{b as V}from"./utils-DWCsNc5l.js";import{t as g,r as C,b as k,f as j,d as w}from"./registry-D0x2Lw0V.js";import{_ as A}from"./index-DJoHu2em.js";import{_ as d}from"./render-tag-Buaq4gMc.js";import{i as v,r as c}from"./attr-tag-W-ozfNNY.js";import{C as F}from"./index-Ci33BrR4.js";import{c as H}from"./index-blmbJU0z.js";import"./_commonjsHelpers-Cpj98o6Y.js";import"./_commonjs-dynamic-modules-TDtrdbi3.js";import"./dynamic-tag-BSuzyz1c.js";import"./index-Cb2Litza.js";import"./index-BZpHAKBe.js";/* empty css             *//* empty css                    *//* empty css                       */import"./index-dZMhXc9l.js";import"./index-CPUcvrin.js";import"./index-BUA-308i.js";import"./index-Ku187Omj.js";import"./index-D7GlLQHj.js";import"./index-DvIcBlTc.js";import"./index-D7B88Psz.js";import"./index--35j0Bzx.js";const M=`<h1 style="display: flex; justify-content: space-between; align-items: center;">
    <span>
        ebay-combobox
    </span>
    <span style="font-weight: normal; font-size: medium; margin-bottom: -15px;">
        DS v2.0.0
    </span>
</h1>

The \`<ebay-combobox>\` is a combination of a text \`<input>\`, and a listbox (\`aria-role="listbox"\`). It supports both written text by the user, as well as text selected from the listbox options.

## Examples and Documentation

-   [Storybook](https://ebay.github.io/ebayui-core/?path=/story/form-input-ebay-combobox)
-   [Storybook Docs](https://ebay.github.io/ebayui-core/?path=/docs/form-input-ebay-combobox)
-   [Code Examples](https://github.com/eBay/ebayui-core/tree/master/src/components/ebay-combobox/examples)
`;let Y=class extends Marko.Component{onCreate(e){this.state={selected:e.selected??[]}}onInput(e){e.selected===null?this.state.selected=[]:e.selected&&(this.state.selected=e.selected)}handleKeydown(e){H(e,()=>{const t=e.target.value;t&&(e.preventDefault(),this.selectChip(t))})}selectChip(e){this.state.selected.includes(e)||(this.state.selected=[...this.state.selected,e],this.emit("change",{selected:this.state.selected}))}handleDelete(e){this.state.selected=[...this.state.selected.slice(0,e),...this.state.selected.slice(e+1)],this.emit("change",{selected:this.state.selected})}};const b="vi9tlnTe",s=g(b),D=s;C.r(b,()=>s);const T=Y;s._=k(function(r,e,t,n,o,S){const{option:O,selected:G,class:$,fluid:B,error:I,value:J,disabled:p,a11yDeleteButton:K="Remove",...R}=r,z=[...O||[]].map(i=>i.text);if(e.be("span",{class:j(["chips-combobox",B&&"chips-combobox--fluid",I&&"chips-combobox--error",$]),"aria-disabled":p&&"true"},"0",n,null,0),o.selected&&o.selected.length){e.be("ul",{class:"chips-combobox__items"},"1",n,null,1);{let i=0;for(const m of o.selected||[]){let u=i++;const f=`[${u}]`;e.be("li",null,"2"+f,n,null,0),d(A,{a11yDeleteButton:K,disabled:p,renderBody:P=>{P.t(m,n)}},e,t,"3"+f,[["delete","handleDelete",!1,[u]]]),e.ee()}}e.ee()}d(F,v(()=>{for(const i of z||[])(!o.selected||!o.selected.some(m=>m===i))&&c("options",{text:i})},{class:"chips-combobox__combobox",disabled:p,chevronSize:"large",...R,autocomplete:"list"}),e,t,"4",[["keydown","handleKeydown",!1],["option-click","selectChip",!1],["expand","emit",!1,["expand"]],["collapse","emit",!1,["collapse"]]]),e.ee()},{t:b},T);s.Component=w(T,s._);const h="YAHa6PVF",a=g(h);C.r(h,()=>a);const E={};a._=k(function(r,e,t,n,o,S){d(D,v(()=>{c("option",{text:"Option 1"}),c("option",{text:"Option 2"}),c("option",{text:"Option 3"})}),e,t,"0")},{t:h,i:!0},E);a.Component=w(E,a._);const q=`<ebay-chips-combobox>
    <@option text="Option 1"/>
    <@option text="Option 2"/>
    <@option text="Option 3"/>
</ebay-chips-combobox>
`,xe={title:"form input/ebay-chips-combobox",component:D,parameters:{docs:{description:{component:M}}},argTypes:{disabled:{type:"boolean",control:{type:"boolean"},description:"sets the disabled attribute of the input"},expanded:{control:{type:"boolean"},description:"sets whether the listbox is expanded"},fluid:{control:{type:"boolean"},type:"boolean",description:"If true, combobox will span the entire width of it's container"},error:{control:{type:"boolean"},type:"boolean",description:"sets the error state of the input"},listSelection:{control:{type:"text"},description:"default is `automatic`; available values are `automatic`, `manual`. If set to automatic will automatically fill in the input with the currently highlighted item when using the up/down keys."},a11yDeleteButton:{control:{type:"text"},description:"The aria-label for the delete button on each chip."},roledescription:{control:{type:"text"},description:"The role description for accessibility. Default text is set and will be in english. Pass this to override for different locales"},options:{name:"@option",description:"Repeatable attribute tag containing the autofill options"},text:{table:{category:"@option attributes"},description:"The text contained in the autofill option"},onChange:{action:"on-change",table:{category:"Events",defaultValue:{summary:"{ selected }"}},description:"fires when the selected chips change"},onCollapse:{action:"on-collapse",table:{category:"Events"},description:" collapsed content"},onExpand:{action:"on-expand",table:{category:"Events"},description:" expanded content"}}},l=V(a,q);var x,y,_;l.parameters={...l.parameters,docs:{...(x=l.parameters)==null?void 0:x.docs,source:{originalSource:"buildExtensionTemplate(DefaultTemplate, DefaultCode)",...(_=(y=l.parameters)==null?void 0:y.docs)==null?void 0:_.source}}};const ye=["Default"];export{l as Default,ye as __namedExportsOrder,xe as default};
