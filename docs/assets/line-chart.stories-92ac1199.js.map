{"version":3,"file":"line-chart.stories-92ac1199.js","sources":["../../src/components/ebay-line-chart/README.md","../../src/common/charts/shared.js","../../src/components/ebay-line-chart/tooltip.marko","../../src/components/ebay-line-chart/component.js","../../src/components/ebay-line-chart/index.marko"],"sourcesContent":["export default \"<h1 style='display: flex; justify-content: space-between; align-items: center;'>\\n    <span>\\n        ebay-line-chart\\n    </span>\\n    <span style='font-weight: normal; font-size: medium; margin-bottom: -15px;'>\\n        DS v3.7.0\\n    </span>\\n</h1>\\n\\nThe line chart displays one to five series of data points as an interactive chart\\n\"","export const chartFontFamily = '\"Market Sans\", Arial, sans-serif',\n    backgroundColor = \"var(--color-background-primary)\",\n    gridColor = \"var(--color-data-viz-grid)\",\n    labelsColor = \"var(--color-data-viz-labels)\",\n    legendColor = \"var(--color-data-viz-legend)\",\n    legendInactiveColor = \"var(--color-data-viz-legend-inactive)\",\n    legendHoverColor = \"var(--color-data-viz-legend-hover)\",\n    tooltipBackgroundColor = \"var(--color-neutral-0)\",\n    tooltipShadows =\n        \"drop-shadow(0 2px 7px var(--color-data-viz-tooltip-shadow-primary)) drop-shadow(0 5px 7px var(--color-data-viz-tooltip-shadow-secondary))\",\n    lineChartPrimaryColor = \"var(--color-data-viz-line-chart-primary)\",\n    lineChartSecondaryColor = \"var(--color-data-viz-line-chart-secondary)\",\n    lineChartTertiaryColor = \"var(--color-data-viz-line-chart-tertiary)\",\n    lineChartQueternaryColor = \"var(--color-data-viz-line-chart-queternary)\",\n    lineChartQuinaryColor = \"var(--color-data-viz-line-chart-quinary)\",\n    trendPositiveColor = \"var(--color-data-viz-trend-positive)\",\n    trendNegativeColor = \"var(--color-data-viz-trend-negative)\",\n    chartPrimaryColor = \"var(--color-data-viz-chart-primary)\",\n    chartSecondaryColor = \"var(--color-data-viz-chart-secondary)\",\n    chartTertiaryBackgroundColor =\n        \"var(--color-data-viz-chart-tertiary-background)\",\n    chartTertiaryStrokeColor = \"var(--color-data-viz-chart-tertiary-stroke)\",\n    chartQuaternaryBackgroundColor =\n        \"var(--color-data-viz-chart-quaternary-background)\",\n    chartQuaternaryStrokeColor =\n        \"var(--color-data-viz-chart-quaternary-stroke)\",\n    chartQuinaryBackgroundColor =\n        \"var(--color-data-viz-chart-quinary-background)\",\n    chartQuinaryStrokeColor = \"var(--color-data-viz-chart-quinary-stroke)\",\n    // patterns are in highcharts PatternOptionsObject format\n    // refer to https://api.highcharts.com/class-reference/Highcharts.PatternOptionsObject\n    patternTertiary = {\n        pattern: {\n            path: {\n                // d is a standard SVG path definition string\n                // refer to https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d\n                d: \"M0 0 L0 3\", // draw a 3 until vertical line\n            },\n            width: 4.5, // defines the x bounds of the repeating pattern\n            height: 3, // defines the  y bounds of the repeating pattern\n            backgroundColor: chartTertiaryBackgroundColor, // sets the patterns background color\n            color: chartTertiaryStrokeColor, // sets the patterns stroke color\n            patternTransform: \"rotate(-60)\", // rotates the path -60 degrees\n        },\n    },\n    patternQuaternary = {\n        pattern: {\n            path: {\n                // d is a standard SVG path definition string\n                // refer to https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d\n                d: \"M0 0 L3 0\",\n            },\n            width: 3, // defines the x bounds of the repeating pattern\n            height: 5, // defines the  y bounds of the repeating pattern\n            backgroundColor: chartQuaternaryBackgroundColor, // sets the patterns background color\n            color: chartQuaternaryStrokeColor, // sets the patterns stroke color\n        },\n    },\n    colorMapping = [\n        chartPrimaryColor,\n        chartSecondaryColor,\n        patternTertiary,\n        patternQuaternary,\n        chartQuinaryBackgroundColor,\n    ],\n    // function is used to set up the colors including lineColor(svg stroke) on each of the series objects\n    // based on the length of the series array\n    setSeriesColors = function (series) {\n        const strokeColorMapping = [\n            chartPrimaryColor,\n            chartSecondaryColor,\n            chartTertiaryStrokeColor,\n            chartQuaternaryStrokeColor,\n            chartQuaternaryStrokeColor,\n        ];\n\n        for (let i = 0; i < series.length; i++) {\n            // Added a modulus in case the user passes in more than 5 series so it doesn't error out\n            const color = strokeColorMapping[i % strokeColorMapping.length];\n            series[i].lineColor = color;\n            series[i].borderColor = color;\n        }\n    };\n","<b>${input.date}</b>\n<br>\n<for|pts| of=input.points>\n    $ var point = pts.point;\n    <if(point.tooltip)>${point.tooltip}</if>\n    <else-if(input.seriesLength)>\n        <div style='display: flex; justify-content: space-between; width: 100%; align-items: flex-start;'>\n            ${point.series.name}\n            <span style='margin-left: 16px'>${point.label}</span>\n        </div>\n    </else-if>\n    <else>${point.label}</else>\n</for>\n","import { CDNLoader } from \"../../common/cdn\";\nimport {\n    chartFontFamily,\n    backgroundColor,\n    gridColor,\n    labelsColor,\n    legendColor,\n    legendInactiveColor,\n    legendHoverColor,\n    tooltipBackgroundColor,\n    tooltipShadows,\n    lineChartPrimaryColor,\n    lineChartSecondaryColor,\n    lineChartTertiaryColor,\n    lineChartQueternaryColor,\n    lineChartQuinaryColor,\n    trendPositiveColor,\n    trendNegativeColor,\n} from \"../../common/charts/shared\";\nimport { debounce } from \"../../common/event-utils\";\nimport tooltipTemplate from \"./tooltip.marko\";\n\nconst pointSize = 6; // controls the size of the plot point markers on lines\n\nexport default class {\n    onCreate() {\n        this.axisTicksLength = -1;\n\n        this.cdnLoader = new CDNLoader(this, {\n            stagger: true,\n            key: \"highcharts\",\n            types: [\"src\", \"src\"],\n            files: [\"highcharts.js\", \"accessibility.js\"],\n            setLoading: () => {},\n            handleError: this.handleError.bind(this),\n            handleSuccess: this.handleSuccess.bind(this),\n        });\n    }\n\n    handleError(err) {\n        this.emit(\"load-error\", err);\n    }\n    handleSuccess() {\n        this._setupChart();\n    }\n\n    onMount() {\n        this.cdnLoader\n            .setOverrides(\n                [\n                    this.input.cdnHighcharts,\n                    this.input.cdnHighchartsAccessibility,\n                ],\n                this.input.version\n            )\n            .mount();\n    }\n\n    onInput(input) {\n        this.input = this.input || input;\n        // if chartRef does not exist do not try to run setupCharts as it may be server side and highcharts only works on the client side\n        if (this.chartRef && this.chartRef.destroy) {\n            this.chartRef.destroy();\n            this._setupChart();\n        }\n    }\n    getContainerId() {\n        return `ebay-line-graph-${this.id}`;\n    }\n\n    _setupChart() {\n        const colors = [\n            // configure the array of colors to use for each series\n            lineChartPrimaryColor,\n            lineChartSecondaryColor,\n            lineChartTertiaryColor,\n            lineChartQueternaryColor,\n            lineChartQuinaryColor,\n        ];\n\n        // check if a single series was passed in for series and if so add it to a new array\n        const series = Array.isArray(this.input.series)\n            ? this.input.series\n            : [this.input.series];\n\n        if (this.input.trend) {\n            // if the trend property exist check value and adjust the first color\n            const trend =\n                typeof this.input.trend === \"string\" &&\n                this.input.trend.toLowerCase(); // if trend of type string force to lowercase\n            const isPositive =\n                series[0].data[0].y <\n                series[0].data[series[0].data.length - 1].y; // auto trend positive check between first and last data values of the single series\n            if (\n                trend === \"positive\" || // if \"positive\" is passed in for the trend property\n                (trend !== \"negative\" && trend !== \"neutral\" && isPositive) // if check if trend is does not equal negative or neutral, and if so use the auto positive calculation\n            ) {\n                colors[0] = trendPositiveColor; // set the color to the positive trend color\n            } else if (\n                trend === \"negative\" ||\n                (trend !== \"neutral\" && !isPositive)\n            ) {\n                // if the trend property equals negative, or trend does not equal neutral and isPositive is false\n                colors[0] = trendNegativeColor; // set the negative trend color\n            }\n        }\n\n        // configure the symbol used for each series markers\n        series.forEach((s, i) => {\n            s.marker = {\n                symbol: this.getSymbol(i),\n            };\n        });\n\n        const chart = this.getChartConfig();\n        const xAxis = this.getXAxisConfig();\n        const yAxis = this.getYAxisConfig(series);\n        const legend = this.getLegendConfig();\n        const tooltip = this.getTooltipConfig();\n        const plotOptions = this.getPlotOptionsConfig(series);\n\n        const title = {\n            text: this.input.title,\n            align: \"left\",\n            useHTML: true,\n            style: {\n                fontSize: \"18px\",\n                fontWeight: 700,\n            },\n        };\n\n        const config = {\n            title,\n            chart,\n            colors,\n            xAxis,\n            yAxis,\n            legend,\n            tooltip,\n            plotOptions,\n            series, // pass in the configured series array\n            credits: {\n                enabled: false, // hide the highcharts label and link in the bottom right of chart\n            },\n        };\n\n        // initialize and keep reference to chart\n        // eslint-disable-next-line no-undef,new-cap\n        this.chartRef = Highcharts.chart(this.getContainerId(), config);\n        // call update markers after the initial render to determine which markers to display if plotPoints is set to true\n        this.updateMarkers();\n    }\n\n    getSymbol(index) {\n        let s;\n        switch (index) {\n            case 1:\n                s = \"square\";\n                break;\n            case 2:\n                s = \"triangle\";\n                break;\n            case 3:\n                s = \"triangle-down\";\n                break;\n            case 4:\n                s = \"diamond\";\n                break;\n            default: // 0 index\n                s = \"circle\";\n                break;\n        }\n        return s;\n    }\n    getChartConfig() {\n        return {\n            type: \"line\",\n            backgroundColor: backgroundColor,\n            style: {\n                fontFamily: chartFontFamily,\n            },\n            events: {\n                // on chart redraw trigger updateMarkers to look for changes in xAxis tick marks and adjust series markers visibility accordingly\n                redraw: () => this.updateMarkers(),\n            },\n        };\n    }\n    getXAxisConfig() {\n        return {\n            // currently setup to support epoch time values for xAxisLabels.\n            // It is possible to set custom non datetime xAxisLabels but will need changes to this component\n            type: \"datetime\",\n            labels: {\n                // input.xAxisLabelFormat allows overriding the default short month / day label\n                // refer to https://api.highcharts.com/class-reference/Highcharts.Time#dateFormat to customize\n                format: this.input.xAxisLabelFormat || \"{value:%b %e}\",\n                align: \"center\",\n                style: {\n                    color: labelsColor, // setting label colors\n                },\n            },\n            tickWidth: 0, // hide the vertical tick on xAxis labels\n            tickPositioner: this.input.xAxisPositioner, // optional input to allow configuring the position of xAxis tick marks\n        };\n    }\n    getYAxisConfig(series) {\n        const component = this; // component reference used in formatter functions that don't have the same scope\n        let yLabelsItterator = 0; // used when yAxisLabels array is provided in input\n        let maxVal = 0; // use to determine the highest yAxis value\n        // configure the symbol used for each series markers\n\n        series.forEach((seriesItem) => {\n            maxVal = Math.max(...seriesItem.data, maxVal);\n        });\n        return {\n            gridLineColor: gridColor, // sets the horizontal grid line colors\n            opposite: true, // moves yAxis labels to the right side of the chart\n            labels: {\n                // if yAxisLabels are not passed in display the standard label\n                format: !this.input.yAxisLabels && \"${text}\",\n                // if yAxisLabels array is passed in this formatter function is needed to\n                // return the proper label for each yAxis tick mark\n                formatter:\n                    this.input.yAxisLabels &&\n                    function () {\n                        if (this.isFirst) {\n                            yLabelsItterator = -1;\n                        }\n                        yLabelsItterator = yLabelsItterator + 1;\n                        return component.input.yAxisLabels[yLabelsItterator];\n                    },\n                style: {\n                    color: labelsColor, // setting label colors\n                },\n            },\n            maxVal,\n            title: {\n                enabled: false, // hide the axis label next to the axis\n            },\n            offset: 0, // set to zero for no offset refer to https://api.highcharts.com/highcharts/yAxis.offset\n            // passed in function for yAxisPositioner refer to https://api.highcharts.com/highcharts/yAxis.tickPositioner for use\n            tickPositioner: this.input.yAxisPositioner,\n        };\n    }\n    getLegendConfig() {\n        return {\n            // if only a single series is provided do not display the legend\n            enabled: this.input.series.length > 1,\n            symbolRadius: 6, // corner radius on legend identifiers svg element\n            symbolWidth: 12, // setting the width of the legend identifiers svg element\n            symbolHeight: 12, // setting the height of the legend identifiers svg element\n            itemStyle: {\n                color: legendColor, // set the color of the text in the legend\n            },\n            itemHiddenStyle: {\n                color: legendInactiveColor, // set legend text color when legend item has been clicked and hidden\n            },\n            itemHoverStyle: {\n                color: legendHoverColor, // set legend text color on hover of legend element\n            },\n        };\n    }\n    getTooltipConfig() {\n        const component = this; // component reference used in formatter functions that don't have the same scope\n        return {\n            formatter: function () {\n                // refer to https://api.highcharts.com/class-reference/Highcharts.Time#dateFormat for dateFormat variables\n                return tooltipTemplate.renderToString({\n                    // eslint-disable-next-line no-undef,new-cap\n                    date: Highcharts.dateFormat(\n                        \"%b %e, %Y\",\n                        this.points[0].x,\n                        false\n                    ),\n                    points: this.points,\n                    seriesLength: component.input.series.length > 1,\n                });\n            },\n            useHTML: true, // allows defining html to format tooltip content\n            backgroundColor: tooltipBackgroundColor, // sets tooltip background color\n            borderWidth: 0, // hide the default border stroke\n            borderRadius: 10, // set the border radius of the tooltip\n            outside: true, // used to render the tooltip outside of the main SVG element\n            shadow: false, // hide the default shadow as it conflicts with designs\n            crosshairs: {\n                dashStyle: \"solid\", // makes a yaxis cross hair appear over the hovered xAxis data points\n            },\n            shared: true, // shared means that if there are multipe series passed in there will be a single tooltip element per xAxis point\n            style: {\n                filter: tooltipShadows, // sets tooltip shadows\n                fontSize: \"12px\",\n            },\n        };\n    }\n    getPlotOptionsConfig(series) {\n        const mouseOut = debounce(() => this.handleMouseOut(), 80);\n        const mouseOver = debounce((e) => this.handleMouseOver(e), 85); // 85ms delay for debounce so it doesn't colide with mouseOut debounce calls\n\n        return {\n            line: {\n                events: {\n                    // assign mouse events to point hovers\n                    mouseOut,\n                },\n            },\n            series: {\n                description: this.input.description, // set the description that was passed in\n                lineWidth: 3, // sets the line width for series lines\n                // sets the starting point of the xAxis to the first data point\n                // if not set the auto resizing of the xAxis will often leave a gap in data on the left hand side\n                pointStart: series[0].data[0].x,\n                point: {\n                    // assign mouse events to point hovers\n                    events: {\n                        mouseOver,\n                        mouseOut,\n                    },\n                },\n            },\n        };\n    }\n    handleMouseOut() {\n        // this function is debounced to improve performance\n        this.chartRef.series.forEach((s) => {\n            s.data.forEach((data) => {\n                // check if hover is on the xAxis (onTick) for each item,\n                // and if they have a className remove and disable the marker\n                if (!data.onTick && data.className !== null) {\n                    data.update(\n                        {\n                            className: null, // nullify className if not active\n                            marker: {\n                                enabled: false, // disable marker if not active\n                            },\n                        },\n                        false, // disable auto redraw\n                        false // disable auto animation\n                    );\n                } else if (data.onTick && data.className === null) {\n                    data.update(\n                        {\n                            className: \"ebay-line-graph__marker--visible\", // set classname\n                            onTick: data.onTick, // sets the onTick flag to keep track of the points enabled status for mouse events\n                            marker: {\n                                enabled: true, // set marker enabled\n                                radius: pointSize, // set the size of marker\n                                lineColor: backgroundColor, // set border color of hover markers\n                                lineWidth: 2, // sets the border line width of the marker symbol\n                            },\n                        },\n                        false, // disable auto redraw\n                        false // disable auto animation\n                    );\n                }\n            });\n        });\n        this.chartRef.redraw(); // trigger redraw after all points have been updated\n    }\n    handleMouseOver(e) {\n        // this function is debounced to improve performance\n        this.chartRef.series.forEach((s) => {\n            s.data.forEach((data) => {\n                // if active xAxis hover position matches the data point x update the marker to display\n                if (data.x === e.target.x) {\n                    data.update(\n                        {\n                            className: \"ebay-line-graph__marker--visible\", // sets the classname\n                            onTick: data.onTick, // sets the onTick flag to keep track of the points enabled status for mouse events\n                            marker: {\n                                enabled: true, // set marker enabled\n                                radius: pointSize, // set the size of marker\n                                lineColor: backgroundColor, // set border color of hover markers\n                                lineWidth: 2, // sets the border line width of the marker symbol\n                            },\n                        },\n                        false, // disable auto redraw\n                        false // disable auto animation\n                    );\n                } else if (!data.onTick && data.className !== null) {\n                    data.update(\n                        {\n                            className: null, // nullify className if not active\n                            onTick: data.onTick, // sets the onTick flag to keep track of the points enabled status for mouse events\n                            marker: {\n                                enabled: false, // disable marker\n                            },\n                        },\n                        false, // disable auto redraw\n                        false // disable auto animation\n                    );\n                }\n            });\n        });\n        this.chartRef.redraw(); // trigger redraw after all points have been updated\n    }\n    updateMarkers(e) {\n        if (this.input.plotPoints) {\n            // ticks is an object with the xaxis date values as their keys\n            // setting tickValues to the keys of the ticks object and parsing into an int for data matching of xValues in series below\n            this.tickValues = Object.keys(this.chartRef.axes[0].ticks).map(\n                (value) => parseInt(value, 10)\n            );\n\n            // this checks if the resize has adjust the number of xAxis tick marks, and if so make updates\n            if (this.axisTicksLength !== this.tickValues.length || e === true) {\n                // update the axisTicksLenth variable used for checks in the updateMarkers calls\n                this.axisTicksLength = this.tickValues.length;\n                // loops through each series if a className exist remove and hide the marker\n                this.chartRef.series.forEach((series) => {\n                    // looping through each series data array\n                    series.data.forEach((data) => {\n                        if (data.className !== null) {\n                            data.update(\n                                {\n                                    className: null, // removing className used to help keep track of active markers\n                                    onTick: false, // sets the onTick flag to keep track of the points enabled status for mouse events\n                                    marker: {\n                                        enabled: false, // disable the marker\n                                    },\n                                },\n                                false, // disable auto redraw\n                                false // disable auto animation\n                            );\n                        }\n                    });\n                });\n\n                // loop through each series again and update markers that line up to xAxis tick marks\n                this.chartRef.series.forEach((series) => {\n                    // loop through each searies data objects\n                    series.data.forEach((data) => {\n                        // loop through the tickValues that come from the x axis ticks and are epoch time stamps\n                        this.tickValues.forEach((tick) => {\n                            // if the current point x value matches the tickValue or the updateMarkers event exist from the redraw event\n                            if (tick === data.x || data.x === e) {\n                                if (data.className === null) {\n                                    data.update(\n                                        {\n                                            className:\n                                                \"ebay-line-graph__marker--visible\", // add the ebay-line-graph__marker--visible class to boost it's visibility\n                                            onTick: true, // sets the onTick flag to keep track of the points enabled status for mouse events\n                                            marker: {\n                                                enabled: true, // set marker enabled\n                                                radius: pointSize, // set the size of the marker\n                                                lineColor: backgroundColor, // set the border color of the hover markers\n                                                lineWidth: 2, // set the border width of the hover markers\n                                            },\n                                        },\n                                        false, // disable auto redraw\n                                        false // disable auto animation\n                                    );\n                                }\n                            }\n                        });\n                    });\n                });\n                this.chartRef.redraw(); // trigger redraw after all points have been updated\n            }\n        }\n    }\n    onDestroy() {\n        this.chartRef.destroy();\n    }\n}\n","import { processHtmlAttributes } from \"../../common/html-attributes\"\nstatic var ignoredAttributes = [\n    'class',\n    'series',\n    'title',\n    'description',\n    'xAxisLabelFormat',\n    'yAxisLabels',\n    'xAxisPositioner',\n    'yAxisPositioner',\n    'trend'\n];\n\n<div\n    ...processHtmlAttributes(input, ignoredAttributes)\n    class=[\n        input.class,\n        'ebay-line-chart'\n    ]>\n    <div.ebay-line-chart__container id=component.getContainerId()/>\n</div>\n"],"names":["Readme","chartFontFamily","backgroundColor","gridColor","labelsColor","legendColor","legendInactiveColor","legendHoverColor","tooltipBackgroundColor","tooltipShadows","lineChartPrimaryColor","lineChartSecondaryColor","lineChartTertiaryColor","lineChartQueternaryColor","lineChartQuinaryColor","trendPositiveColor","trendNegativeColor","_marko_registerComponent","_marko_componentType","_marko_template","_marko_component","_","_marko_renderer","input","out","_componentDef","_component","state","$global","be","t","date","ee","n","_marko_node","_keyValue","pts","points","_keyScope","concat","point","tooltip","seriesLength","series","name","label","i","Component","_marko_defineComponent","pointSize","CDNLoader","err","colors","trend","isPositive","s","chart","xAxis","yAxis","legend","plotOptions","config","index","component","yLabelsItterator","maxVal","seriesItem","tooltipTemplate","mouseOut","debounce","mouseOver","e","data","value","tick","ignoredAttributes","_marko_component2","_marko_merge_attrs","processHtmlAttributes","_marko_class_merge","class","getContainerId"],"mappings":"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"}