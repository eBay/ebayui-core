{"version":3,"file":"character-count.stories-417cbd59.js","sources":["../../src/components/ebay-character-count/README.md","../../src/components/ebay-character-count/component.js","../../src/components/ebay-character-count/index.marko","../../src/components/ebay-character-count/examples/in-field.marko","../../src/components/ebay-character-count/examples/in-field.marko?raw","../../src/components/ebay-character-count/examples/custom-text.marko","../../src/components/ebay-character-count/examples/custom-text.marko?raw"],"sourcesContent":["export default \"<h1 style=\\\"display: flex; justify-content: space-between; align-items: center;\\\">\\n    <span>\\n        ebay-character-count\\n    </span>\\n    <span style=\\\"font-weight: normal; font-size: medium; margin-bottom: -15px;\\\">\\n        DS v1.0.0\\n    </span>\\n</h1>\\n\\nButton styled with core classes.\\n\\n## Examples and Documentation\\n\\n-   [Storybook](https://ebay.github.io/ebayui-core/?path=/story/building-blocks-ebay-character-count)\\n-   [Storybook Docs](https://ebay.github.io/ebayui-core/?path=/docs/building-blocks-ebay-character-count)\\n-   [Code Examples](https://github.com/eBay/ebayui-core/tree/master/src/components/ebay-character-count/examples)\\n\"","export default class extends Marko.Component {\n    onCreate(input) {\n        this.state = {\n            count: this.countFromValue(input.value),\n        };\n    }\n\n    onInput(input) {\n        if (typeof window === \"undefined\") {\n            return;\n        }\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n        this.timeout = setTimeout(() => {\n            this.state.count = this.countFromValue(input.value);\n            this.emit(\"change\", {\n                count: this.state.count,\n                inputAriaLive: this.state.count >= input.max ? \"polite\" : \"off\",\n            });\n        }, 500);\n    }\n\n    countFromValue(value) {\n        if (typeof value === \"string\") {\n            // use iterator to account for emojis and other multi-char symbols\n            return [...value].length;\n        }\n        if (typeof value === \"number\") {\n            return value;\n        }\n        return 0;\n    }\n}\n","import { processHtmlAttributes } from \"../../common/html-attributes\"\n\n$ const { renderBody, max, clippedText, value, ...htmlAttributes } = input;\n\n<span ...processHtmlAttributes(htmlAttributes)>\n    <if(renderBody)>\n        <${renderBody}/>\n    </if>\n    <else>\n        ${state.count}/${max}\n        <if(clippedText)>\n            <span class=\"clipped\">\n                ${clippedText}\n            </span>\n        </if>\n    </else>\n</span>\n","$ const { max = 120, clippedText } = input;\n\n<span class=\"field\">\n    <label class=\"field__label field__label--stacked\" for=\"my-input\">\n        Field Label\n    </label>\n    <span class=\"field__control\">\n        <ebay-textbox\n            value=state.inputValue\n            type=\"text\"\n            aria-describedby=\"my-input-description my-input-charcount\"\n            class=\"textbox__control\"\n            id=\"my-input\"\n            aria-live=state.inputAriaLive\n            on-keyup(\"onTextChange\")\n            on-change(\"onTextChange\")\n        />\n    </span>\n    <div class=\"field__description field__description--group\">\n        <span id=\"my-input-description\">\n            Brief description\n        </span>\n        <ebay-character-count\n            id=\"my-input-charcount\"\n            value=state.inputValue\n            max=max\n            clipped-text=clippedText\n            on-change(\"onCharCountChange\")\n        />\n    </div>\n</span>\nclass {\n    onCreate() {\n        this.state = {\n            inputValue: \"\",\n            inputAriaLive: null,\n        };\n    }\n    onTextChange({ originalEvent: e }) {\n        this.state.inputValue = e.target.value;\n    }\n    onCharCountChange({ count, inputAriaLive }) {\n        this.state.inputAriaLive = inputAriaLive;\n        this.emit('change', {count, inputAriaLive})\n    }\n}\n","export default \"$ const { max = 120, clippedText } = input;\\n\\n<span class=\\\"field\\\">\\n    <label class=\\\"field__label field__label--stacked\\\" for=\\\"my-input\\\">\\n        Field Label\\n    </label>\\n    <span class=\\\"field__control\\\">\\n        <ebay-textbox\\n            value=state.inputValue\\n            type=\\\"text\\\"\\n            aria-describedby=\\\"my-input-description my-input-charcount\\\"\\n            class=\\\"textbox__control\\\"\\n            id=\\\"my-input\\\"\\n            aria-live=state.inputAriaLive\\n            on-keyup(\\\"onTextChange\\\")\\n            on-change(\\\"onTextChange\\\")\\n        />\\n    </span>\\n    <div class=\\\"field__description field__description--group\\\">\\n        <span id=\\\"my-input-description\\\">\\n            Brief description\\n        </span>\\n        <ebay-character-count\\n            id=\\\"my-input-charcount\\\"\\n            value=state.inputValue\\n            max=max\\n            clipped-text=clippedText\\n            on-change(\\\"onCharCountChange\\\")\\n        />\\n    </div>\\n</span>\\nclass {\\n    onCreate() {\\n        this.state = {\\n            inputValue: \\\"\\\",\\n            inputAriaLive: null,\\n        };\\n    }\\n    onTextChange({ originalEvent: e }) {\\n        this.state.inputValue = e.target.value;\\n    }\\n    onCharCountChange({ count, inputAriaLive }) {\\n        this.state.inputAriaLive = inputAriaLive;\\n        this.emit('change', {count, inputAriaLive})\\n    }\\n}\\n\"","$ const { max = 120, clippedText } = input;\n\n<span class=\"field\">\n    <label class=\"field__label field__label--stacked\" for=\"my-input\">\n        Field Label\n    </label>\n    <span class=\"field__control\">\n        <ebay-textbox\n            value=state.inputValue\n            type=\"text\"\n            aria-describedby=\"my-input-charcount\"\n            class=\"textbox__control\"\n            id=\"my-input\"\n            aria-live=state.inputAriaLive\n            on-keyup(\"onTextChange\")\n            on-change(\"onTextChange\")\n        />\n    </span>\n    <div class=[\"field__description\", \"field__description--group\", state.charCount > max && \"field__description--attention\"]>\n        <ebay-character-count\n            id=\"my-input-charcount\"\n            value=state.inputValue\n            max=max\n            on-change(\"onCharCountChange\")\n        >\n            ${state.charCount} of ${max} (${max - state.charCount} remaining)\n        </ebay-character-count>\n    </div>\n</span>\nclass {\n    onCreate() {\n        this.state = {\n            inputValue: \"\",\n            inputAriaLive: null,\n            charCount: 0\n        };\n    }\n    onTextChange({ originalEvent: e }) {\n        this.state.inputValue = e.target.value;\n    }\n    onCharCountChange({ count, inputAriaLive }) {\n        this.state.inputAriaLive = inputAriaLive;\n        this.state.charCount = count;\n        this.emit('change', {count, inputAriaLive})\n    }\n}\n","export default \"$ const { max = 120, clippedText } = input;\\n\\n<span class=\\\"field\\\">\\n    <label class=\\\"field__label field__label--stacked\\\" for=\\\"my-input\\\">\\n        Field Label\\n    </label>\\n    <span class=\\\"field__control\\\">\\n        <ebay-textbox\\n            value=state.inputValue\\n            type=\\\"text\\\"\\n            aria-describedby=\\\"my-input-charcount\\\"\\n            class=\\\"textbox__control\\\"\\n            id=\\\"my-input\\\"\\n            aria-live=state.inputAriaLive\\n            on-keyup(\\\"onTextChange\\\")\\n            on-change(\\\"onTextChange\\\")\\n        />\\n    </span>\\n    <div class=[\\\"field__description\\\", \\\"field__description--group\\\", state.charCount > max && \\\"field__description--attention\\\"]>\\n        <ebay-character-count\\n            id=\\\"my-input-charcount\\\"\\n            value=state.inputValue\\n            max=max\\n            on-change(\\\"onCharCountChange\\\")\\n        >\\n            ${state.charCount} of ${max} (${max - state.charCount} remaining)\\n        </ebay-character-count>\\n    </div>\\n</span>\\nclass {\\n    onCreate() {\\n        this.state = {\\n            inputValue: \\\"\\\",\\n            inputAriaLive: null,\\n            charCount: 0\\n        };\\n    }\\n    onTextChange({ originalEvent: e }) {\\n        this.state.inputValue = e.target.value;\\n    }\\n    onCharCountChange({ count, inputAriaLive }) {\\n        this.state.inputAriaLive = inputAriaLive;\\n        this.state.charCount = count;\\n        this.emit('change', {count, inputAriaLive})\\n    }\\n}\\n\""],"names":["Readme","_marko_component$2","input","value","_marko_registerComponent","_marko_componentType","_marko_template","_marko_component2","_marko_component","_","_marko_renderer","out","_componentDef","_component","state","$global","renderBody","max","clippedText","htmlAttributes","_objectWithoutProperties","_excluded","be","_marko_attrs","processHtmlAttributes","_marko_dynamic_tag","t","count","ee","Component","_marko_defineComponent","_marko_node2","_marko_createElement","onCreate","inputValue","inputAriaLive","onTextChange","_ref","originalEvent","e","target","onCharCountChange","_ref2","emit","n","_marko_node","_marko_tag","_ebayTextbox","_ebayCharacterCount","InFieldCode","charCount","_marko_class_merge","CustomTextCode"],"mappings":"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"}