{"version":3,"file":"index.bcb3df20.js","sources":["../../.storybook/storybook-code-source/index.js"],"sourcesContent":["function tagToString(\n    tagName,\n    args,\n    plurarls = {},\n    indent = \"\",\n    fromAttribute = false\n) {\n    const nextIndex = indent + \"\\t\";\n    const { body, attrs } = argsToString(args, plurarls, nextIndex);\n    let formattedTagName = tagName;\n    if (fromAttribute) {\n        formattedTagName = `@${plurarls[formattedTagName] || formattedTagName}`;\n    }\n    return `<${\n        formattedTagName +\n        attrs +\n        (body\n            ? `>\\n${body.replace(\n                  /^|\\n/gm,\n                  `$&${nextIndex}`\n              )}\\n</${formattedTagName}>`\n            : `/>`)\n    }`;\n}\n\nfunction argsToString(args, plurarls, indent) {\n    let attrs = \"\";\n    let body = \"\";\n    for (const key in args) {\n        if (\n            Object.prototype.hasOwnProperty.call(args, key) &&\n            key !== \"renderBody\"\n        ) {\n            const val = args[key];\n            const dashCaseKey = key.replace(\n                /([a-z])([A-Z])/g,\n                (m, m1, m2) => `${m1}-${m2.toLowerCase()}`\n            );\n            if (Array.isArray(val)) {\n                for (const item of val) {\n                    body += tagToString(\n                        dashCaseKey,\n                        item,\n                        plurarls,\n                        indent,\n                        true\n                    );\n                }\n            } else if (val && typeof val === \"object\") {\n                if (key === \"spread\") {\n                    Object.keys(val).forEach((spreadKey) => {\n                        attrs += ` ${spreadKey}=${JSON.stringify(\n                            val[spreadKey]\n                        )}`;\n                    });\n                } else\n                    body += tagToString(\n                        dashCaseKey,\n                        val,\n                        plurarls,\n                        indent,\n                        true\n                    );\n            } else {\n                attrs += ` ${dashCaseKey}=${JSON.stringify(val)}`;\n            }\n        }\n    }\n    if (args.renderBody) {\n        body += args.renderBody;\n    }\n\n    return { attrs, body };\n}\n\nexport { tagToString };\n"],"names":["tagToString","tagName","args","plurarls","indent","fromAttribute","nextIndex","body","attrs","argsToString","formattedTagName","key","val","dashCaseKey","m","m1","m2","item","spreadKey"],"mappings":"AAAA,SAASA,EACLC,EACAC,EACAC,EAAW,CAAE,EACbC,EAAS,GACTC,EAAgB,GAClB,CACE,MAAMC,EAAYF,EAAS,IACrB,CAAE,KAAAG,EAAM,MAAAC,CAAO,EAAGC,EAAaP,EAAMC,EAAUG,CAAS,EAC9D,IAAII,EAAmBT,EACvB,OAAII,IACAK,EAAmB,IAAIP,EAASO,IAAqBA,KAElD,IACHA,EACAF,GACCD,EACK;AAAA,EAAMA,EAAK,QACP,SACA,KAAKD,GACvB;AAAA,IAAsBI,KACR,OAEd,CAEA,SAASD,EAAaP,EAAMC,EAAUC,EAAQ,CAC1C,IAAII,EAAQ,GACRD,EAAO,GACX,UAAWI,KAAOT,EACd,GACI,OAAO,UAAU,eAAe,KAAKA,EAAMS,CAAG,GAC9CA,IAAQ,aACV,CACE,MAAMC,EAAMV,EAAKS,GACXE,EAAcF,EAAI,QACpB,kBACA,CAACG,EAAGC,EAAIC,IAAO,GAAGD,KAAMC,EAAG,YAAW,GACtD,EACY,GAAI,MAAM,QAAQJ,CAAG,EACjB,UAAWK,KAAQL,EACfL,GAAQP,EACJa,EACAI,EACAd,EACAC,EACA,EACxB,OAEuBQ,GAAO,OAAOA,GAAQ,SACzBD,IAAQ,SACR,OAAO,KAAKC,CAAG,EAAE,QAASM,GAAc,CACpCV,GAAS,IAAIU,KAAa,KAAK,UAC3BN,EAAIM,EACP,GACzB,CAAqB,EAEDX,GAAQP,EACJa,EACAD,EACAT,EACAC,EACA,EACxB,EAEgBI,GAAS,IAAIK,KAAe,KAAK,UAAUD,CAAG,GAErD,CAEL,OAAIV,EAAK,aACLK,GAAQL,EAAK,YAGV,CAAE,MAAAM,EAAO,KAAAD,EACpB"}