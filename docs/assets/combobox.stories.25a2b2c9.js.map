{"version":3,"file":"combobox.stories.25a2b2c9.js","sources":["../../src/components/ebay-combobox/README.md","../../src/common/build-safe-regex/index.js","../../src/components/ebay-combobox/component.js","../../src/components/ebay-combobox/index.marko","../../src/components/ebay-combobox/examples/search-filtering.marko","../../src/components/ebay-combobox/examples/search-filtering.marko?raw"],"sourcesContent":["export default \"<h1 style=\\\"display: flex; justify-content: space-between; align-items: center;\\\">\\n    <span>\\n        ebay-combobox\\n    </span>\\n    <span style=\\\"font-weight: normal; font-size: medium; margin-bottom: -15px;\\\">\\n        DS v2.0.0\\n    </span>\\n</h1>\\n\\nThe `<ebay-combobox>` is a combination of a text `<input>`, and a listbox (`aria-role=\\\"listbox\\\"`). It supports both written text by the user, as well as text selected from the listbox options.\\n\\n## Examples and Documentation\\n\\n-   [Storybook](https://ebay.github.io/ebayui-core/?path=/story/form-input-ebay-combobox)\\n-   [Storybook Docs](https://ebay.github.io/ebayui-core/?path=/docs/form-input-ebay-combobox)\\n-   [Code Examples](https://github.com/eBay/ebayui-core/tree/master/src/components/ebay-combobox/examples)\\n\"","export default function (query = \"\") {\n    return new RegExp(\n        query.trim().replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\"),\n        \"i\"\n    );\n}\n","import { createLinear } from \"makeup-active-descendant\";\nimport FloatingLabel from \"makeup-floating-label\";\nimport Expander from \"makeup-expander\";\nimport { scroll } from \"../../common/element-scroll\";\nimport * as eventUtils from \"../../common/event-utils\";\nimport safeRegex from \"../../common/build-safe-regex\";\n\nexport default {\n    focus() {\n        this.getEl(\"combobox\").focus();\n    },\n\n    handleFocus() {\n        this._emitComboboxEvent(\"focus\");\n    },\n\n    isExpanded() {\n        return this.expander && this.expander.expanded;\n    },\n\n    isCollapsed() {\n        return this.expander && !this.expander.expanded;\n    },\n\n    expand() {\n        if (this.isCollapsed()) {\n            this.expander.expanded = true;\n        }\n    },\n\n    collapse() {\n        if (this.isExpanded()) {\n            this.expander.expanded = false;\n        }\n    },\n\n    handleButtonClick(originalEvent) {\n        this.buttonClicked = true;\n        this.emit(\"button-click\", { originalEvent });\n    },\n\n    handleActiveDescendantChange(ev) {\n        if (this.listSelection === \"automatic\") {\n            const selected = this._getVisibleOptions()[ev.detail.toIndex];\n            // Set textbox value to selected, don't update state since it messes up active descendant\n            this.getEl(\"combobox\").value = selected.text;\n        }\n    },\n\n    setSelectedView() {\n        const current = this._getVisibleOptions().indexOf(\n            this._getSelectedOption()\n        );\n        this.activeDescendant.index = current;\n        const selectedEl = this.getEls(\"options\")[current];\n        if (selectedEl) {\n            scroll(selectedEl);\n        }\n    },\n\n    handleExpand() {\n        if (this.state.viewAllOptions) {\n            this.setSelectedView();\n        } else {\n            this.state.viewAllOptions = true;\n            this.once(\"update\", () => {\n                this.setSelectedView();\n            });\n        }\n        this.emit(\"expand\");\n    },\n\n    handleCollapse() {\n        this.activeDescendant.reset();\n        this.emit(\"collapse\");\n    },\n\n    handleComboboxClick(e) {\n        if (e.target === document.activeElement) {\n            this.expand();\n        }\n    },\n\n    handleComboboxKeyDown(originalEvent) {\n        eventUtils.handleUpDownArrowsKeydown(originalEvent, () => {\n            originalEvent.preventDefault();\n            this.expand();\n        });\n\n        eventUtils.handleEnterKeydown(originalEvent, () => {\n            if (this.isExpanded()) {\n                const selectedIndex = this.activeDescendant.index;\n\n                if (selectedIndex !== -1) {\n                    this._setSelectedText(\n                        this._getVisibleOptions()[selectedIndex].text\n                    );\n                }\n\n                if (this.input.expanded !== true) {\n                    this.collapse();\n                }\n            }\n        });\n\n        eventUtils.handleEscapeKeydown(originalEvent, () => {\n            this.collapse();\n        });\n    },\n\n    handleComboboxKeyUp(originalEvent) {\n        eventUtils.handleTextInput(originalEvent, () => {\n            this.state.currentValue = this.getEl(\"combobox\").value;\n            this.once(\"update\", () => {\n                // If we have an expander after the update\n                // that could mean that new content was made visible.\n                // We force the expander open just in case.\n                this.expand();\n            });\n            this.state.viewAllOptions = false;\n\n            this._emitComboboxEvent(\"input-change\");\n        });\n    },\n\n    handleComboboxBlur() {\n        const wasClickedOption = this.optionClicked;\n\n        if (wasClickedOption) {\n            this.focus();\n        }\n\n        if (\n            !wasClickedOption &&\n            !this.buttonClicked &&\n            this.input.expanded !== true\n        ) {\n            this.collapse();\n        }\n\n        this.buttonClicked = false;\n\n        if (\n            this.listSelection === \"automatic\" &&\n            this.getEl(\"combobox\").value !== this.state.currentValue\n        ) {\n            this.state.currentValue = this.getEl(\"combobox\").value;\n        }\n\n        if (this.lastValue !== this.state.currentValue) {\n            this.lastValue = this.state.currentValue;\n            this._emitComboboxEvent(\"change\");\n        }\n    },\n\n    handleSelectOption(text) {\n        this._setSelectedText(text);\n    },\n\n    handleFloatingLabelInit() {\n        this._emitComboboxEvent(\"floating-label-init\");\n    },\n\n    onInput(input) {\n        this.autocomplete = input.autocomplete === \"list\" ? \"list\" : \"none\";\n        this.listSelection =\n            input.listSelection === \"manual\" ? \"manual\" : \"automatic\";\n        input.options = input.options || [];\n        this.lastValue = input.value;\n        this.state = {\n            currentValue: this.lastValue,\n            viewAllOptions: (this.state && this.state.viewAllOptions) || true,\n        };\n        if (this.expander) {\n            this.expandedChange = input.expanded !== this.expanded;\n            if (this.expandedChange) {\n                this.expander.expanded = input.expanded;\n            }\n        }\n        this.expanded = input.expanded;\n    },\n\n    onMount() {\n        this._setupMakeup();\n    },\n\n    onUpdate() {\n        this._setupMakeup();\n    },\n\n    onRender() {\n        if (typeof window !== \"undefined\") {\n            this._cleanupMakeup();\n        }\n    },\n\n    onDestroy() {\n        this._cleanupMakeup();\n    },\n\n    _setupFloatingLabel() {\n        // TODO: makeup-floating-label should be updated so that we can remove the event listeners.\n        // It probably makes more sense to just move this functionality into Marko though.\n        if (this._floatingLabel) {\n            this._floatingLabel.refresh();\n            this.handleFloatingLabelInit();\n        } else if (document.readyState === \"complete\") {\n            if (this.el) {\n                this._floatingLabel = new FloatingLabel(this.el);\n                this.handleFloatingLabelInit();\n            }\n        } else {\n            this.subscribeTo(window).once(\"load\", () => {\n                this._setupFloatingLabel();\n            });\n        }\n    },\n\n    _setupMakeup() {\n        if (this._hasVisibleOptions()) {\n            if (!this.activeDescendant) {\n                this.activeDescendant = createLinear(\n                    this.el,\n                    this.getEl(\"combobox\"),\n                    this.getEl(\"listbox\"),\n                    '[role=\"option\"]',\n                    {\n                        activeDescendantClassName: \"combobox__option--active\",\n                        autoInit: -1,\n                        autoReset: -1,\n                        axis: \"y\",\n                        autoScroll: true,\n                    }\n                );\n            }\n\n            if (!this.expander) {\n                this.expander = new Expander(this.el, {\n                    autoCollapse: !this.expanded,\n                    expandOnFocus: true,\n                    collapseOnFocusOut: !this.expanded && !this.input.button,\n                    contentSelector: '[role=\"listbox\"]',\n                    hostSelector: '[role=\"combobox\"]',\n                    expandedClass: \"combobox--expanded\",\n                    simulateSpacebarClick: true,\n                });\n            }\n\n            if (this.expandedChange) {\n                this.expander.expanded = this.expanded;\n                this.expandedChange = false;\n            }\n        }\n\n        if (this.input.floatingLabel) {\n            this._setupFloatingLabel();\n        }\n    },\n\n    _cleanupMakeup() {\n        if (this.activeDescendant) {\n            this.activeDescendant.reset();\n            this.activeDescendant.destroy();\n            this.activeDescendant = null;\n        }\n\n        if (this.expander) {\n            this.expander.destroy();\n            this.expander = null;\n        }\n        if (this._floatingLabel) {\n            this._floatingLabel.destroy();\n            this._floatingLabel = null;\n        }\n    },\n\n    _setSelectedText(text) {\n        if (this.state.currentValue !== text) {\n            const input = this.getEl(\"combobox\");\n            this.state.currentValue = input.value = text;\n            // Move cursor to the end of the input.\n            input.selectionStart = input.selectionEnd = text.length;\n            input.focus();\n            this._emitComboboxEvent(\"select\");\n        }\n    },\n\n    _getSelectedOption() {\n        return this.input.options.find(\n            (option) => option.text === this.state.currentValue\n        );\n    },\n\n    _getVisibleOptions() {\n        if (this.autocomplete === \"none\" || this.state.viewAllOptions) {\n            return this.input.options;\n        }\n\n        const currentValueReg = safeRegex(this.state.currentValue);\n        return this.input.options.filter(\n            (option) => currentValueReg.test(option.text || \"\") || option.sticky\n        );\n    },\n\n    _hasVisibleOptions() {\n        return !this.input.disabled && this._getVisibleOptions().length > 0;\n    },\n\n    _emitComboboxEvent(eventName) {\n        this.emit(`${eventName}`, {\n            currentInputValue: this.state.currentValue,\n            selectedOption: this._getSelectedOption(),\n            options: this.input.options,\n        });\n    },\n};\n","import { processHtmlAttributes } from '../../common/html-attributes';\nstatic {\n    var ignoredAttributes = [\n        'class',\n        'style',\n        'borderless',\n        'autocomplete',\n        'options',\n        'roledescription',\n        'floatingLabel',\n        'listSelection',\n        'expanded',\n        'fluid',\n    ];\n}\nstatic var ignoredButtonAttributes = ['class'];\nstatic var itemIgnoredAttributes = ['text'];\n$ {\n    var roledescription =\n        input.roledescription ||\n        `Use up and down arrow keys to navigate options.${\n            component.autocomplete === 'none' ? '' : ' Options change based on text input'\n        }`;\n}\n$ var hasButton = !!input.button;\n$ var defaultTag = input.fluid ? 'div' : 'span';\n$ var id = input.id || component.getElId('input');\n<${defaultTag}\n    class=[\n        'combobox',\n        input.floatingLabel && 'floating-label',\n        input.fluid && 'combobox--fluid',\n        input.class,\n    ]\n    style=input.style\n    on-activeDescendantChange('handleActiveDescendantChange')\n    onExpander-expand('handleExpand')\n    onExpander-collapse('handleCollapse')\n>\n    <if(input.floatingLabel)>\n        <label\n            for=id\n            class=['floating-label__label', input.disabled && 'floating-label__label--disabled']\n        >\n            ${input.floatingLabel}\n        </label>\n    </if>\n    <span class=[\n        'combobox__control',\n        hasButton && 'combobox__control--actionable',\n        input.borderless && 'combobox__control--borderless',\n    ]>\n        <!--\n        NOTE: Uses autocomplete=\"new-password\" because of a problem with Chrome where the autfill does not\n        respect the \"off\" key. Tested and works in all other browsers properly as well.\n        -->\n        <input\n            ...processHtmlAttributes(\n                Object.assign(input, {\n                    id: id,\n                }),\n                ignoredAttributes\n            )\n            key='combobox'\n            type='text'\n            role='combobox'\n            value=state.currentValue\n            aria-autocomplete=component.autocomplete\n            aria-roledescription=roledescription\n            aria-haspopup='listbox'\n            autocomplete='off'\n            aria-expanded='false'\n            onBlur('handleComboboxBlur')\n            onClick('handleComboboxClick')\n            onFocus('handleFocus')\n            onKeydown('handleComboboxKeyDown')\n            onKeyup('handleComboboxKeyUp')\n        >\n        <${hasButton ? 'button' : null}\n            ...processHtmlAttributes(input.button, ignoredButtonAttributes)\n            onClick('handleButtonClick')\n            key='actionable'\n            class=['icon-btn', 'icon-btn--transparent', hasButton && input.button.class]\n        >\n            <if(hasButton && input.button.renderBody)>\n                <${input.button.renderBody}/>\n            </if>\n            <else><ebay-chevron-down-12-icon/></else>\n        </>\n    </span>\n    <if(component._hasVisibleOptions())>\n        <div.combobox__listbox key='listbox' role='listbox'>\n            <for|option| of=component._getVisibleOptions()>\n                $ var isSelected = (option.value || option.text) === state.currentValue;\n                <div\n                    ...processHtmlAttributes(option, itemIgnoredAttributes)\n                    key='options[]'\n                    role='option'\n                    class:no-update=['combobox__option', option.class]\n                    tabindex:no-update='-1'\n                    aria-selected=isSelected && 'true'\n                    onClick('handleSelectOption', option.text)\n                    onMousedown('handleSelectOption', option.text)\n                >\n                    <span>${option.text}</span>\n                </div>\n            </for>\n        </div>\n    </if>\n</>\n","import countryList from './data.json';\nclass {\n    onCreate() {\n        this.state = {\n            options: countryList,\n            autocompleteOption: 'none',\n            value: '',\n        };\n    }\n    async inputChange({ currentInputValue }, { el, index, selected }) {\n        this.state.autocompleteOption = 'none';\n        this.state.value = currentInputValue;\n        const options = await this.searchCountry(currentInputValue);\n        this.state.options = options;\n        this.state.autocompleteOption = 'list';\n    }\n\n    async searchCountry(currentInputValue) {\n        return new Promise((resolve) => {\n            clearTimeout(this.timeout);\n            this.timeout = setTimeout(() => {\n                const filtered = countryList\n                    .filter((country) =>\n                        country.name.toLowerCase().startsWith(currentInputValue.toLowerCase())\n                    )\n                    .slice(0, 10);\n                resolve(filtered);\n            }, 500);\n        });\n    }\n    selected(el) {\n        console.log('selected', el);\n    }\n}\n\n<ebay-combobox\n    ...input\n    name='example2text'\n    autocomplete=state.autocompleteOption\n    value=state.value\n    on-input-change('inputChange')\n    on-select('selected')\n>\n    <for|option| of=state.options>\n        <@option data-id=option.code text=option.name/>\n    </for>\n</ebay-combobox>\n","export default \"import countryList from './data.json';\\nclass {\\n    onCreate() {\\n        this.state = {\\n            options: countryList,\\n            autocompleteOption: 'none',\\n            value: '',\\n        };\\n    }\\n    async inputChange({ currentInputValue }, { el, index, selected }) {\\n        this.state.autocompleteOption = 'none';\\n        this.state.value = currentInputValue;\\n        const options = await this.searchCountry(currentInputValue);\\n        this.state.options = options;\\n        this.state.autocompleteOption = 'list';\\n    }\\n\\n    async searchCountry(currentInputValue) {\\n        return new Promise((resolve) => {\\n            clearTimeout(this.timeout);\\n            this.timeout = setTimeout(() => {\\n                const filtered = countryList\\n                    .filter((country) =>\\n                        country.name.toLowerCase().startsWith(currentInputValue.toLowerCase())\\n                    )\\n                    .slice(0, 10);\\n                resolve(filtered);\\n            }, 500);\\n        });\\n    }\\n    selected(el) {\\n        console.log('selected', el);\\n    }\\n}\\n\\n<ebay-combobox\\n    ...input\\n    name='example2text'\\n    autocomplete=state.autocompleteOption\\n    value=state.value\\n    on-input-change('inputChange')\\n    on-select('selected')\\n>\\n    <for|option| of=state.options>\\n        <@option data-id=option.code text=option.name/>\\n    </for>\\n</ebay-combobox>\\n\""],"names":["Readme","safeRegex","query","_marko_component$1","originalEvent","ev","selected","current","selectedEl","scroll","eventUtils.handleUpDownArrowsKeydown","eventUtils.handleEnterKeydown","selectedIndex","eventUtils.handleEscapeKeydown","eventUtils.handleTextInput","wasClickedOption","text","input","FloatingLabel","createLinear","Expander","option","currentValueReg","eventName","ignoredAttributes","ignoredButtonAttributes","itemIgnoredAttributes","_marko_registerComponent","_marko_componentType","_marko_template","_marko_component2","_marko_component","_","_marko_renderer","out","_componentDef","_component","state","$global","roledescription","concat","autocomplete","hasButton","button","defaultTag","fluid","id","getElId","_marko_class_merge","floatingLabel","class","_marko_style_merge","style","d","be","disabled","t","ee","borderless","e","_marko_merge_attrs","processHtmlAttributes","Object","assign","currentValue","_tagName","bf","renderBody","_marko_dynamic_tag","_marko_tag","_ebayChevronDown12Icon","ef","_hasVisibleOptions","_getVisibleOptions","isSelected","value","_keyValue","_keyScope","pa","Component","_marko_defineComponent","onCreate","options","countryList","autocompleteOption","inputChange","_ref","_ref2","currentInputValue","searchCountry","Promise","resolve","clearTimeout","timeout","setTimeout","filtered","filter","country","name","toLowerCase","startsWith","slice","el","console","log","_options","push","code","Symbol","iterator","_marko_self_iterator","_ebayCombobox","_objectSpread","SearchFilteringTemplateCode"],"mappings":"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"}